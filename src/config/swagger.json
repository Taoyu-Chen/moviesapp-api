{
  "swagger": "2.0",
  "info": {
    "description": "This is a sample server Movies app server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `api-key` to test the authorization     filters.",
    "version": "1.0.0",
    "title": "Movieapp API",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
      "email": "20091612@mail.wit.ie"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "localhost:8080",
  "tags": [
    {
      "name": "movies",
      "description": "Everything about your Movies"
    },
    {
      "name": "keywords",
      "description": "Access to movie keywords"
    },
    {
      "name": "user",
      "description": "Operations about user"
    },
    {
      "name": "similar movies",
      "description": "Operations about similar movies"
    },
    {
      "name": "toprated movies",
      "description": "Operations about toprated movies"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "paths": {
    "/api/movies": {
      "get": {
        "tags": [
          "movies"
        ],
        "summary": "Get movies from seedDB",
        "operationId": "findPetsByStatus",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/api/keywords/test/{keywordId}": {
      "get": {
        "tags": [
          "keywords"
        ],
        "summary": "Get a keyword by keyword id",
        "description": "Return a single keyword",
        "operationId": "getKeywordById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "keywordId",
            "in": "path",
            "description": "ID of keyword to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/api/movies/{movieId}": {
      "get": {
        "tags": [
          "movies"
        ],
        "summary": "Find movie by ID",
        "operationId": "getMovieById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      },
      "delete": {
        "tags": [
          "movies"
        ],
        "summary": "Deletes a movie",
        "operationId": "deleteMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/api/movies/{movieId}/reviews": {
      "get": {
        "tags": [
          "movies"
        ],
        "summary": "Find movie reviews by ID",
        "operationId": "getMovieReviewsById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/api/toprated": {
      "get": {
        "tags": [
          "toprated movies"
        ],
        "summary": "Get toprated movies from mongodb",
        "operationId": "GetTopratedMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      },
      "post": {
        "tags": [
          "toprated movies"
        ],
        "summary": "Add a toprated movie",
        "description": "Add a new toprated movie",
        "operationId": "addNewTopratedMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/api/toprated/db": {
      "get": {
        "tags": [
          "toprated movies"
        ],
        "summary": "Store toprated movies to mongodb",
        "operationId": "StoreTopratedMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/api/toprated/{movieId}": {
      "get": {
        "tags": [
          "toprated movies"
        ],
        "summary": "Find toprated movie by ID",
        "operationId": "getTopratedMovieById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      },
      "put": {
        "tags": [
          "toprated movies"
        ],
        "summary": "Update a toprated movie",
        "operationId": "updateTopratedMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Title"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      },
      "delete": {
        "tags": [
          "toprated movies"
        ],
        "summary": "Delete a toprated movie",
        "operationId": "deleteTopratedMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/api/toprated/{movieId}/reviews": {
      "get": {
        "tags": [
          "toprated movies"
        ],
        "summary": "Find toprated movie review by ID",
        "operationId": "getTopratedMovieReviewsById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/api/similar/db/{movieId}": {
      "get": {
        "tags": [
          "similar movies"
        ],
        "summary": "Store similar movie to mongodb",
        "operationId": "getSimilarMovieById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/api/similar/{movieId}": {
      "put": {
        "tags": [
          "similar movies"
        ],
        "summary": "Update a similar movie",
        "description": "",
        "operationId": "updateSimilarMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Title"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      },
      "delete": {
        "tags": [
          "similar movies"
        ],
        "summary": "Deletes a similar movie",
        "description": "",
        "operationId": "deleteSimilarMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "Movie id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/api/similar/{movieId}/reviews": {
      "get": {
        "tags": [
          "similar movies"
        ],
        "summary": "Find similar movie review by ID",
        "description": "Returns a single movie",
        "operationId": "getSimilarMovieReviewsById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/api/similar/": {
      "get": {
        "tags": [
          "similar movies"
        ],
        "summary": "Get similar movies from mongodb",
        "operationId": "GetSimilarMovieFromMongo",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      },
      "post": {
        "tags": [
          "similar movies"
        ],
        "summary": "Add a similar movie",
        "description": "Add a new similar movie",
        "operationId": "addNewSimilarMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Movie"
            }
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    },
    "/api/similar/movie/{movieId}": {
      "get": {
        "tags": [
          "similar movies"
        ],
        "summary": "Get a similar movie by id from mongodb",
        "operationId": "GetASimilarMovie",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Movie"
              }
            }
          },
          "400": {
            "description": "Invalid status value"
          }
        }
      }
    },
    "/api/users": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Register OR authenticate a user",
        "operationId": "loginUser",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Created user object",
            "required": true,
            "schema": {
              "$ref": "#/definitions/User"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login"
          },
          "201": {
            "description": "Successful created new user"
          },
          "401": {
            "description": "Authentication failed. Wrong password"
          }
        }
      }
    },
    "/api/keywords/{movieId}": {
      "get": {
        "tags": [
          "keywords"
        ],
        "summary": "Find movie by ID",
        "description": "Returns a single movie",
        "operationId": "getMovieKeywordsById",
        "produces": [
          "application/xml",
          "application/json"
        ],
        "parameters": [
          {
            "name": "movieId",
            "in": "path",
            "description": "ID of movie to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "404": {
            "description": "Movie not found"
          }
        }
      }
    }
  },
  "securityDefinitions": {
    "APIKey": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "APIKey": []
    }
  ],
  "definitions": {
    "Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "petId": {
          "type": "integer",
          "format": "int64"
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "shipDate": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": [
            "placed",
            "approved",
            "delivered"
          ]
        },
        "complete": {
          "type": "boolean",
          "default": false
        }
      },
      "xml": {
        "name": "Order"
      }
    },
    "Movie": {
      "type": "object",
      "properties": {
        "genres_id": {
          "type": "array",
          "items": {
            "type": "integer"
          }
        },
        "_id": {
          "type": "string"
        },
        "adult": {
          "type": "boolean"
        },
        "backdrop_path": {
          "type": "string"
        },
        "id": {
          "type": "integer"
        },
        "original_language": {
          "type": "string"
        },
        "original_title": {
          "type": "string"
        },
        "overview": {
          "type": "string"
        },
        "poster_path": {
          "type": "string"
        },
        "release_date": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "video": {
          "type": "boolean"
        },
        "vote_average": {
          "type": "number"
        },
        "vote_count": {
          "type": "number"
        },
        "popularity": {
          "type": "number"
        }
      }
    },
    "Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Category"
      }
    },
    "User": {
      "type": "object",
      "properties": {
        "username": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      },
      "xml": {
        "name": "User"
      }
    },
    "Title": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        }
      }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      },
      "xml": {
        "name": "Tag"
      }
    },
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
